# -*- coding: utf-8 -*-
"""Kmeans_cricket.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-6OO8JDv3amLfOBb2oGweH_-Eww5mhNX
"""

from google.colab import files
uploaded=files.upload()

"""##**Importing Libraries**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""##**Loading Dataset**"""

df=pd.read_csv('cricket clean.csv')

"""Player 👤
→ The name of the player.

Mat 🏏
→ Total number of matches played by the player.

Inns 🎯
→ Total number of innings the player has batted in.

NO (Not Outs) 🚫
→ Number of times the player remained not out at the end of an innings.

Runs 🏃‍♂️
→ Total runs scored by the player in their career.

HS (Highest Score) 🔝
→ The player’s highest individual score in a single innings.

Ave (Batting Average) 📊
→ The batting average, calculated as total runs divided by number of times out.
Ave = Runs / (Inns - NO)

BF (Balls Faced) 🎾
→ Total number of balls faced by the player while batting.

SR (Strike Rate) ⚡
→ The strike rate, showing how quickly the player scores.
SR = (Runs / BF) * 100

100 (Centuries) 💯
→ Number of times the player scored 100 or more runs in an innings.

50 (Half-Centuries) 🟡
→ Number of times the player scored between 50 and 99 runs in an innings.

0 (Ducks) 🦆
→ Number of times the player got out without scoring any runs.

Exp (Experience) ⏳
→ The experience level of the player, which can be based on matches played, years active, or any predefined value representing seniority.

##**EDA**
"""

df.info()

df.isnull().sum().sum()

df

df['HS']=df['HS'].str.replace("*","")

df['HS']=df['HS'].astype(int)

df.info()

df.duplicated().sum()

cricket=df.copy()

cricket.drop(['Player'],axis=1,inplace=True)

cricket

"""##**Standardization**"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X = sc.fit_transform(cricket)

X

#converting cricket_sc into DataFraeme
X=pd.DataFrame(X,columns=cricket.columns)
X

X['50'].mean()

value  = np.float64(1.658307808933778e-16)
print(f"{value:.20f}")

X['50'].std()

"""##**Kmeans model**"""

from sklearn.cluster import KMeans

wcss = []

for i in range(1, 8):
  kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
  kmeans.fit(X)  #it will start the clsutering process

  print(kmeans.inertia_)  #printing the wcss values
  wcss.append(kmeans.inertia_)

wcss

plt.plot(range(1,8),wcss,marker='o')
plt.show()

from sklearn.metrics import silhouette_score

silhouette_scores=[]

for i in range(2,8):
  kmeans = KMeans(n_clusters =i,random_state=32)
  kmeans.fit(X)

  silhouette_avg = silhouette_score(X,kmeans.labels_)
  silhouette_scores.append(silhouette_avg)
plt.plot(range(2,8),silhouette_scores,marker='o',color = 'green')

kmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 32)
kmeans.fit(X)  #start the clustering process

y=kmeans.predict(X)
y

df["Clusterid"] = kmeans.labels_

df

"""##**2d vizualization**"""

#2d
plt.figure(figsize=(10,6))
sns.scatterplot(data=df,x='Runs',y='Ave',hue='Clusterid')
plt.show()

"""##**3D vizulaization**"""

#3d
import plotly.express as px

fig = px.scatter_3d(df,x="Runs",y="Ave",z='SR',color = "Clusterid",hover_name="Player",title="3d scatter plot")
fig.update_layout(scene = dict(xaxis_title ="Runs",yaxis_title ="Average",zaxis_title='strike rate'),width =800,height = 600)
fig.show()