# -*- coding: utf-8 -*-
"""DecisionTree_heart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJ9M9lIWhs_eN16nVtAt5UbGtnWMuuBm

#**Importing Libraries and dataset**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('heart.csv')
df

"""age: the age of the patient in years.

sex: the sex of the patient (1 = male, 0 = female).

cp: the type of chest pain the patient experienced (1 = typical angina, 2 = atypical angina, 3 = non-anginal pain, 4 = asymptomatic).

trestbps: the resting blood pressure of the patient in mm Hg.

chol: the serum cholesterol level of the patient in mg/dl.

fbs: the fasting blood sugar level of the patient, measured in mg/dl (1 = high, 0 = low).

restecg: the resting electrocardiographic results of the patient (0 = normal, 1 = ST-T wave abnormality, 2 = left ventricular hypertrophy).

(Resting electrocardiographic (ECG or EKG) is a non-invasive diagnostic test that records the electrical activity of the heart while the patient is at rest. The test is performed using an electrocardiogram machine, which records the electrical signals produced by the heart through electrodes placed on the chest, arms, and legs.)

thalach: the maximum heart rate achieved by the patient during exercise. exang: whether the patient experienced exercise-induced angina (1 = yes, 0 = no).

oldpeak: the ST depression induced by exercise relative to rest. slope: the slope of the ST segment during peak exercise (1 = upsloping, 2 = flat, 3 = downsloping).

(ST depression induced by exercise relative to rest Oldpeak, also known as ST depression, is a common parameter measured during an exercise stress test to evaluate the presence and severity of coronary artery disease. It represents the amount of ST segment depression that occurs on an electrocardiogram (ECG) during exercise compared to rest.)

ca: the number of major vessels colored by fluoroscopy (0-3).

(he number of major vessels (0-3) colored by fluoroscopy is a parameter that is used to assess the severity of coronary artery disease (CAD) in patients who undergo coronary angiography)

thal: the type of thallium scan performed on the patient (1 = fixed defect, 2 = reversible defect, 3 = normal).

target: the presence of heart disease in the patient (0 = no disease, 1 = disease present).

#**EDA**
"""

df.info()

df.isnull().sum().sum()

df.duplicated().sum() #print the total number of duplicate rows in the data

df[df.duplicated()]  #print all the duplicate rows

df.drop_duplicates(inplace=True)
df.duplicated().sum()

#we should not worry about ouliers in the DT model as they get ignored whil taking decision
#label encoding ==> no object col are there in df

# model building
# 1.split the data in terms of x and y
# 2.split in terms of train and test
# 3.model initialization
# 4.train the model
# 5.prediction by model
# 6.evaluate , accuracy
# 7.hyperparameter tuning
# 8.visualize the tree

"""#**Machine learning Process**"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import *

x=df.drop('target',axis=1)
y=df['target']

x

y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=25)

x_train

y_train

x_test

y_test

"""#**Applying Decision Tree on Dataset**"""

from sklearn.tree import DecisionTreeClassifier

model=DecisionTreeClassifier()

model.fit(x_train,y_train)

model_pred=model.predict(x_test)
model_pred

accuracy_score(y_test,model_pred)*100

confusion_matrix(y_test,model_pred)

depth=[1,2,3,4,5,6,7,8,9,10]
for i in depth:
  model=DecisionTreeClassifier(max_depth=i)
  model.fit(x_train,y_train)
  model_pred=model.predict(x_test)
  acc=accuracy_score(y_test,model_pred)*100
  print(f"for the max depth {i} the accuracy score is: {acc}")

"""#**Final Decision Tree Model**"""

final_model=DecisionTreeClassifier(max_depth=5)
final_model.fit(x_train,y_train)

final_model_pred=final_model.predict(x_test)
final_model_pred

accuracy_score(y_test,final_model_pred)*100

from sklearn.tree import plot_tree

plt.figure(figsize=(12,8))
plot_tree(final_model,filled=True,feature_names=x.columns,class_names=['no heartattack','heartattack'])
plt.title("Decision Tree")
plt.show()

from sklearn.linear_model import LogisticRegression

le=LogisticRegression()
le.fit(x_train,y_train)

le_model=le.predict(x_test)
le_model
accuracy_score(y_test,le_model)*100

print(classification_report(y_test,le_model))